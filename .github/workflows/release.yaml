name: Release Terraform

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., v1.0.0)"
        required: true
        type: string

jobs:
  deploy:
    runs-on: ${{ vars.RUNNER_RUNS_ON }}
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 1
          token: ${{ secrets.MAGALUBOT_GH_PAT }}

      - name: Set up Go
        uses: actions/setup-go@v5.0.2
        with:
          cache-dependency-path: "**/go.sum"
          go-version: stable

      - name: Import GPG key
        id: import-gpg-key
        env:
          GPG_PRIVATE_KEY: ${{ secrets.MAGALUBOT_GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.MAGALUBOT_GPG_PASSPHRASE }}
        run: |
          # Create a temporary keyring file
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import

          # Trust the key ultimately
          KEY_ID=$(gpg --list-secret-keys --keyid-format LONG | grep -Po '(?<=rsa)([A-Z0-9]+)')
          echo "${KEY_ID}:6:" | gpg --import-ownertrust

          # Configure git to use GPG
          git config --global user.signingkey "$KEY_ID"
          git config --global commit.gpgsign true
          git config --global tag.gpgsign true

          # Configure GPG to use passphrase
          mkdir -p ~/.gnupg
          echo "allow-loopback-pinentry" > ~/.gnupg/gpg-agent.conf
          echo "pinentry-mode loopback" > ~/.gnupg/gpg.conf
          gpg-connect-agent reloadagent /bye

          # Export key ID for later use
          echo "GPG_KEY_ID=$KEY_ID" >> $GITHUB_ENV

      - name: Configure Git
        id: config-git
        if: steps.import-gpg-key.outcome == 'success'
        run: |
          git config --global user.email "${{vars.MAGALUBOT_EMAIL}}"
          git config --global user.name "${{vars.MAGALUBOT_USER_NAME}}"
          git config --global commit.gpgsign true
          git config --global tag.gpgsign true
          git config --global gpg.program git-gpg-wrapper
          # Get and set the signing key
          SIGNING_KEY=$(gpg --list-secret-keys --keyid-format LONG | awk '/sec/ {split($2, a, "/"); print a[2]}')
          git config --global user.signingkey $SIGNING_KEY

      - name: Create and push tag
        id: create-and-push-tag
        if: steps.config-git.outcome == 'success'
        run: |
          git tag -a ${{ github.event.inputs.version }} -m "Release ${{ github.event.inputs.version }}"
          git push origin ${{ github.event.inputs.version }}

      - name: Build with GoReleaser
        id: build-with-goreleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: 2
          args: release --clean --config="release.yaml"
        env:
          VERSION: ${{ github.ref_name }}
          GITHUB_TOKEN: ${{ secrets.MAGALUBOT_GH_PAT }}
          GPG_FINGERPRINT: ${{ secrets.MAGALUBOT_GPG_FINGERPRINT }}
          GPG_PASSPHRASE: ${{ secrets.MAGALUBOT_GPG_PASSPHRASE }}
